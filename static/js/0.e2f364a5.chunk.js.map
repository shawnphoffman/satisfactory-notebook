{"version":3,"sources":["loaders/items.ts","../node_modules/fast-memoize/src/index.js","loaders/buildings.ts"],"names":["getItemDefinition","memoize","itemSlug","ItemJson","getItemIcon","itemImageSlug","getBuildingImageName","image","ImageMap","get","console","log","getAllItems","getNameSlugMapping","items","Object","keys","reduce","memo","slug","name","sortSlugsByName","slugs","mapping","sort","a","b","monadic","fn","cache","serializer","arg","value","cacheKey","computedValue","call","this","set","variadic","args","Array","prototype","slice","arguments","apply","assemble","context","strategy","serialize","bind","strategyDefault","options","length","create","serializerDefault","JSON","stringify","ObjectWithoutPrototypeCache","has","key","cacheDefault","module","exports","strategies","getBuildingName","BuildingJson","replace","icon","type","entries","filter","buildingType","map","buildingSlug"],"mappings":"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","file":"static/js/0.e2f364a5.chunk.js","sourcesContent":["import memoize from 'fast-memoize'\n\nimport ItemJson from 'data/Items.json'\n\nimport { getBuildingImageName } from 'loaders/buildings'\nimport ImageMap from 'loaders/imageMap'\n\n//\nexport const getItemDefinition = memoize((itemSlug: string) => {\n\treturn (ItemJson as any)[itemSlug]\n})\n\n//\nexport const getItemIcon = memoize((itemSlug: string, size: number = 256) => {\n\tconst itemImageSlug = `${getBuildingImageName(itemSlug)}.${256}.png`\n\tconst image = ImageMap.get(itemImageSlug)\n\tif (!image) {\n\t\tconsole.log(`No image found for ${itemSlug}`)\n\t}\n\treturn image\n})\n\n//\nconst getAllItems = memoize(() => {\n\treturn ItemJson as Record<string, any>\n})\n\n//\nconst getNameSlugMapping = memoize(() => {\n\tconst items = getAllItems() as Record<string, any>\n\n\treturn Object.keys(items).reduce((memo, slug) => {\n\t\tmemo[slug] = items[slug].name\n\n\t\treturn memo\n\t}, {} as Record<string, any>)\n})\n\n//\nexport const sortSlugsByName = memoize((slugs: string[]) => {\n\tconst mapping = getNameSlugMapping()\n\n\treturn slugs.sort((a, b) => {\n\t\tif (mapping[a] > mapping[b]) return 1\n\n\t\tif (mapping[a] < mapping[b]) return -1\n\n\t\treturn 0\n\t})\n})\n","//\n// Main\n//\n\nfunction memoize (fn, options) {\n  var cache = options && options.cache\n    ? options.cache\n    : cacheDefault\n\n  var serializer = options && options.serializer\n    ? options.serializer\n    : serializerDefault\n\n  var strategy = options && options.strategy\n    ? options.strategy\n    : strategyDefault\n\n  return strategy(fn, {\n    cache: cache,\n    serializer: serializer\n  })\n}\n\n//\n// Strategy\n//\n\nfunction isPrimitive (value) {\n  return value == null || typeof value === 'number' || typeof value === 'boolean' // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\n\nfunction monadic (fn, cache, serializer, arg) {\n  var cacheKey = isPrimitive(arg) ? arg : serializer(arg)\n\n  var computedValue = cache.get(cacheKey)\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.call(this, arg)\n    cache.set(cacheKey, computedValue)\n  }\n\n  return computedValue\n}\n\nfunction variadic (fn, cache, serializer) {\n  var args = Array.prototype.slice.call(arguments, 3)\n  var cacheKey = serializer(args)\n\n  var computedValue = cache.get(cacheKey)\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.apply(this, args)\n    cache.set(cacheKey, computedValue)\n  }\n\n  return computedValue\n}\n\nfunction assemble (fn, context, strategy, cache, serialize) {\n  return strategy.bind(\n    context,\n    fn,\n    cache,\n    serialize\n  )\n}\n\nfunction strategyDefault (fn, options) {\n  var strategy = fn.length === 1 ? monadic : variadic\n\n  return assemble(\n    fn,\n    this,\n    strategy,\n    options.cache.create(),\n    options.serializer\n  )\n}\n\nfunction strategyVariadic (fn, options) {\n  var strategy = variadic\n\n  return assemble(\n    fn,\n    this,\n    strategy,\n    options.cache.create(),\n    options.serializer\n  )\n}\n\nfunction strategyMonadic (fn, options) {\n  var strategy = monadic\n\n  return assemble(\n    fn,\n    this,\n    strategy,\n    options.cache.create(),\n    options.serializer\n  )\n}\n\n//\n// Serializer\n//\n\nfunction serializerDefault () {\n  return JSON.stringify(arguments)\n}\n\n//\n// Cache\n//\n\nfunction ObjectWithoutPrototypeCache () {\n  this.cache = Object.create(null)\n}\n\nObjectWithoutPrototypeCache.prototype.has = function (key) {\n  return (key in this.cache)\n}\n\nObjectWithoutPrototypeCache.prototype.get = function (key) {\n  return this.cache[key]\n}\n\nObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n  this.cache[key] = value\n}\n\nvar cacheDefault = {\n  create: function create () {\n    return new ObjectWithoutPrototypeCache()\n  }\n}\n\n//\n// API\n//\n\nmodule.exports = memoize\nmodule.exports.strategies = {\n  variadic: strategyVariadic,\n  monadic: strategyMonadic\n}\n","import memoize from 'fast-memoize'\n\nimport BuildingJson from 'data/Buildings.json'\nimport ItemJson from 'data/Items.json'\n\nexport const getBuildingName = memoize((slug: string) => {\n\treturn (BuildingJson as any)[slug]?.name\n})\n\nexport const getBuildingImageName = memoize((slug: string) => {\n\tconst itemSlug = slug.replace(/^building/g, 'item')\n\treturn (ItemJson as any)[itemSlug].icon\n})\n\nexport const getBuildingsByType = memoize((type: string) => {\n\treturn Object.entries(BuildingJson)\n\t\t.filter(([key, value]) => {\n\t\t\treturn value.buildingType === type\n\t\t})\n\t\t.map(([key]) => key)\n})\n\nexport const getBuildingDefinition = memoize((buildingSlug: string) => {\n\treturn (BuildingJson as any)[buildingSlug]\n})\n"],"sourceRoot":""}