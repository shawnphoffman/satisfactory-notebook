{"version":3,"sources":["loaders/recipes.ts","../node_modules/fraction.js/fraction.js","components/Page.js","components/ProductList.js"],"names":["getRecipeName","memoize","slug","getAllRecipes","name","handcraftingProducers","Set","RecipeJson","getRecipeList","Object","entries","map","value","getRecipeDefinition","getMachineCraftableProducts","allRecipes","rawProductSlugs","keys","reduce","memo","key","producedIn","products","ingredients","filter","item","has","length","push","p","sortSlugsByName","calculateRate","amount","duration","isFluid","amt","decimal","Number","toFixed","fraction","Fraction","toFraction","perCycle","perMin","perMinFraction","perCycleLabel","perMinLabel","sortRecipesByName","slugs","mapping","sort","a","b","aAlt","includes","bAlt","m","getRecipesByItemProduct","itemSlug","root","P","createError","errorConstructor","temp","Error","apply","this","arguments","IntermediateInheritor","prototype","DivisionByZero","InvalidParameter","assign","n","s","isNaN","parseInt","throwInvalidParam","parse","p1","p2","M","d","v","w","x","y","z","A","B","C","D","N","undefined","Math","pow","floor","log","LN10","NaN","match","abs","gcd","places","ceil","round","t","eps","cont","rec","slice","i","tmp","valueOf","excludeWhole","whole","str","res","dec","g","cycLen","rem","cycleLen","cycOff","len","rem1","rem2","e","r","modpow","cycleStart","Page","children","useContext","AppContext","padLeftMargin","onePerPage","PageBorder","leftMargin","PageContent","styled","div","props","debug","Resource","React","lazy","ProductList","removedProducts","useMemo","style","width","id","Suspense","fallback","Skeleton"],"mappings":"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","file":"static/js/4.3e8558e3.chunk.js","sourcesContent":["import memoize from 'fast-memoize'\nimport Fraction from 'fraction.js'\n\nimport RecipeJson from 'data/Recipes.json'\n\nimport { sortSlugsByName } from 'loaders/items'\n\nconst getRecipeName = memoize((slug: string) => {\n\treturn (getAllRecipes() as any)[slug].name\n})\n\nexport const handcraftingProducers = new Set([\n\t'building-build-gun',\n\t'building-work-bench-component',\n\t'building-workshop-component',\n\t'building-converter', // this one is here because its recipes are not complete.\n])\n\nexport const getAllRecipes = memoize(() => {\n\treturn RecipeJson\n})\n\nexport const getRecipeList = memoize(() => {\n\treturn Object.entries(getAllRecipes()).map(([slug, value]) => {\n\t\treturn {\n\t\t\t...value,\n\t\t\tslug,\n\t\t}\n\t})\n})\n\nexport const getRecipeDefinition = memoize((slug: string) => {\n\treturn (getAllRecipes() as any)[slug]\n})\n\nexport const getMachineCraftableProducts = memoize(() => {\n\tconst allRecipes = getAllRecipes() as any\n\tconst rawProductSlugs = Object.keys(allRecipes).reduce((memo: any, key: string) => {\n\t\tconst { producedIn, products, ingredients } = allRecipes[key]\n\n\t\tconst machineCraftable =\n\t\t\tproducedIn.filter((item: string) => {\n\t\t\t\treturn !handcraftingProducers.has(item) && ingredients.length > 0\n\t\t\t}).length > 0\n\n\t\tif (!machineCraftable) return memo\n\n\t\tmemo.push(...products.map((p: { slug: string }) => p.slug))\n\n\t\treturn memo\n\t}, [])\n\n\treturn sortSlugsByName([...new Set(rawProductSlugs)] as string[])\n})\n\nexport const calculateRate = memoize((amount: number, duration: number, isFluid = false) => {\n\t// HACK - This is trash code. I should be ashamed\n\tconst amt = isFluid ? amount / 1000 : amount\n\tconst decimal = Number((amt * (60 / duration)).toFixed(4))\n\tconst fraction = new Fraction(decimal).toFraction(true)\n\n\treturn {\n\t\tperCycle: amt,\n\t\tperMin: decimal,\n\t\tperMinFraction: fraction,\n\t\tperCycleLabel: isFluid ? 'm³' : 'x',\n\t\tperMinLabel: isFluid ? 'm³/min' : '/min',\n\t}\n})\n\nexport const sortRecipesByName = memoize((slugs: string[]) => {\n\tconst mapping = slugs.map(slug => {\n\t\treturn {\n\t\t\tslug: slug,\n\t\t\tname: getRecipeName(slug),\n\t\t}\n\t})\n\n\tmapping.sort((a, b) => {\n\t\tconst aAlt = a.name.includes('Alternate')\n\t\tconst bAlt = b.name.includes('Alternate')\n\n\t\tif (aAlt && bAlt) {\n\t\t\tif (a.name > b.name) return 1\n\t\t\tif (b.name > a.name) return -1\n\t\t\treturn 0\n\t\t}\n\n\t\tif (aAlt && !bAlt) return 1\n\t\tif (!aAlt && bAlt) return -1\n\n\t\tif (a.name > b.name) return 1\n\t\tif (b.name > a.name) return -1\n\n\t\treturn 0\n\t})\n\n\treturn mapping.map(m => m.slug)\n})\n\nexport const getRecipesByItemProduct = memoize((itemSlug: string) => {\n\treturn getRecipeList()\n\t\t.filter(({ products }) => {\n\t\t\treturn (\n\t\t\t\tproducts.filter((item: any) => {\n\t\t\t\t\treturn item.slug === itemSlug\n\t\t\t\t}).length > 0\n\t\t\t)\n\t\t})\n\t\t.map(item => item.slug)\n})\n","/**\n * @license Fraction.js v4.0.12 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n\n    function errorConstructor() {\n      var temp = Error.apply(this, arguments);\n      temp['name'] = this['name'] = name;\n      this['stack'] = temp['stack'];\n      this['message'] = temp['message'];\n    }\n\n    /**\n     * Error constructor\n     *\n     * @constructor\n     */\n    function IntermediateInheritor() { }\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n *= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throwInvalidParam();\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1 /= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A += C;\n                    B += D;\n                  } else {\n                    C += A;\n                    D += B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n *= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throwInvalidParam();\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A += 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A += 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A += 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throwInvalidParam();\n      }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d /= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d /= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a %= b;\n      if (!a)\n        return b;\n      b %= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n  Fraction['REDUCE'] = 1;\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction;\n      }\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(m) {\n\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      // First naive implementation, needs improvement\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      var cont = this['abs']()['toContinued']();\n\n      eps = eps || 0.001;\n\n      function rec(a) {\n        if (a.length === 1)\n          return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n\n      for (var i = 0; i < cont.length; i++) {\n        var tmp = rec(cont.slice(0, i + 1));\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N /= g;\n        D /= g;\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n\n      str += N / D | 0;\n\n      N %= D;\n      N *= 10;\n\n      if (N)\n        str += \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \"(\";\n        for (var i = cycLen; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n","import { memo, useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { AppContext } from '../AppContext'\n\nexport const Page = ({ children }) => {\n\tconst [{ padLeftMargin, onePerPage }] = useContext(AppContext)\n\n\treturn (\n\t\t<PageBorder leftMargin={padLeftMargin} onePerPage={onePerPage}>\n\t\t\t<PageContent>{children}</PageContent>\n\t\t</PageBorder>\n\t)\n}\n\nexport default memo(Page)\n\nconst PageBorder = styled.div`\n\tbackground: ${props => (props.debug ? 'lightgreen' : 'white')};\n\tborder: ${props => (props.debug ? '1px solid black' : 'none')};\n\twidth: 100%;\n\tpadding: 4mm;\n\t${props => (props.leftMargin ? 'padding-left: 12mm' : null)};\n\tbox-sizing: border-box;\n\n\t${props => (props.onePerPage ? 'page-break-after: always' : 'page-break-inside: avoid')};\n\n\t@media print {\n\t\tbackground: none;\n\t\tborder: none;\n\t}\n`\n\nconst PageContent = styled.div`\n\t/* background: ${props => (props.debug ? 'lightcoral' : 'white')}; */\n\twidth: 100%;\n\theight: 100%;\n\tbox-sizing: border-box;\n\tpadding: 4px;\n`\n","import React, { memo } from 'react'\nimport styled from 'styled-components'\n\nimport Page from 'components/Page'\nimport { getMachineCraftableProducts } from 'loaders/recipes'\n\nimport { AppContext } from '../AppContext'\n// import Resource from 'components/Resource'\n// const Page = React.lazy(() => import('components/Page'))\nconst Resource = React.lazy(() => import('components/Resource'))\n// const Resource = React.lazy(() => {\n// \treturn Promise.all([\n// \t\timport('components/Resource'),\n// \t\tnew Promise(resolve => {\n// \t\t\t// setTimeout(() => {}, 3000)\n// \t\t\tsetTimeout(resolve, 3000)\n// \t\t}),\n// \t]).then(([module]) => module)\n// })\n\n// TODO - Change overall JSON strategy to async/await with useEffect\n\nconst ProductList = () => {\n\tconst [{ removedProducts }] = React.useContext(AppContext)\n\n\tconst products = React.useMemo(\n\t\t() =>\n\t\t\tgetMachineCraftableProducts()\n\t\t\t\t// .slice(0, 15)\n\t\t\t\t.filter(p => !removedProducts.includes(p)),\n\t\t[removedProducts]\n\t)\n\n\treturn (\n\t\t<div style={{ width: '100%' }}>\n\t\t\t{products.map(p => (\n\t\t\t\t<Page key={p} id=\"page\">\n\t\t\t\t\t<React.Suspense fallback={<Skeleton />}>\n\t\t\t\t\t\t<Resource slug={p} />\n\t\t\t\t\t</React.Suspense>\n\t\t\t\t</Page>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nexport default memo(ProductList)\n\nconst Skeleton = styled.div`\n\tposition: relative;\n\toverflow: hidden;\n\theight: 150px;\n\tborder: 1px solid #999;\n\tborder-radius: 5px;\n\tmargin-top: 80px;\n\n\t::before {\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\tleft: -150px;\n\t\ttop: 0;\n\t\theight: 100%;\n\t\twidth: 150px;\n\t\tbackground: linear-gradient(to right, transparent 0%, #e8e8e8 50%, transparent 100%);\n\t\tanimation: load 1.5s cubic-bezier(0.4, 0, 0.2, 1) infinite;\n\t}\n`\n"],"sourceRoot":""}