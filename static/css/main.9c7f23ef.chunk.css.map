{"version":3,"sources":["webpack://src/index.css","webpack://src/.linaria-cache/src/components/src/components/Sidebar.js","webpack://src/.linaria-cache/src/src/App.js"],"names":[".h1ud5ej5",".srm2hks",".s6dt1cv",".i1sz23ug",".snnpna5",".h1p0t9lw",".l1wf01e7",".lmb5ate",".r1jz6y89",".fm0as6w"],"mappings":"AAAA,aAEC,MACC,OAAQ,CACR,QACD,CACD,CAEA,EACC,qBACD,CAMA,UAHC,QASD,CANA,KACC,kCAAoC,CAEpC,SAAY,CAEZ,uBACD,CAEA,MACC,eACD,CAEA,GACC,QAAS,CACT,0BAA0B,CAA1B,yBACD,CAEA,GACC,iBACD,CAEA,EACC,oBAAqB,CACrB,aACD,CAEA,cACC,QACC,yBACD,CACD,CC4IMA,UAAAA,kBAAAA,CAAAA,eAAAA,CAKAC,SAAAA,YAAAA,CAIAC,SAAAA,eAAAA,CAAAA,eAAAA,CAAAA,uBAAAA,CAAAA,eAAAA,CAAAA,KAAAA,CAAAA,YAAAA,CAAAA,YAAAA,CAAAA,aAAAA,SAAAA,YAAAA,CAAAA,CAAAA,oCAAAA,SAAAA,UAAAA,CAAAA,cAAAA,CAAAA,WAAAA,CAAAA,CA2BAC,UAAAA,cAAAA,CAKAC,mBALAD,uBAKAC,CAKAC,mBALAD,cAKAC,CAAAA,UAAAA,iBAAAA,CAAAA,gBAAAA,CAAAA,cAAAA,CAAAA,UAAAA,CAQAC,UAAAA,aAAAA,CAAAA,cAAAA,CAKAC,SAAAA,cAAAA,CAAAA,WAAAA,CAKAC,UAAAA,aAAAA,CAAAA,cAAAA,CAAAA,eAAAA,CC9NAC,SAAAA,YAAAA,CAAAA,kBAAAA,CAAAA,yBAAAA,SAAAA,qBAAAA,CAAAA","file":"main.9c7f23ef.chunk.css","sourcesContent":["@media print {\n\n\t@page {\n\t\tsize: A5;\n\t\tmargin: 0;\n\t}\n}\n\n* {\n\tbox-sizing: border-box;\n}\n\nhtml {\n\tmargin: 0px;\n}\n\nbody {\n\tfont-family: 'Open Sans', sans-serif;\n\tmargin: 0px;\n\tpadding: 0px;\n\n\tcontent-visibility: auto;\n}\n\nlabel {\n\tmargin-left: 5px;\n}\n\nul {\n\tmargin: 0;\n\tpadding-inline-start: 12px;\n}\n\nli {\n\tmargin-bottom: 6px;\n}\n\na {\n\ttext-decoration: none;\n\tcolor: inherit;\n}\n\n@media screen {\n\ta:hover {\n\t\ttext-decoration: underline;\n\t}\n}","import React, { memo, useCallback, useContext } from 'react'\n// import styled from 'styled-components'\nimport { styled } from '@linaria/react'\nimport * as Sentry from '@sentry/react'\n\nimport { getItemDefinition } from 'loaders/items'\n\nimport { ActionType, AppContext } from '../AppContext'\nimport logo from './logo.png'\n\n//\nconst SectionHeader = memo(({ icon, label }) => (\n\t<HeaderWrapper>\n\t\t<i className={`fas ${icon} fa-fw`}></i>\n\t\t<span> {label}</span>\n\t</HeaderWrapper>\n))\n\n//\nconst SettingCheckbox = memo(({ label, name, checked, onChange, hint }) => (\n\t<InputContainer>\n\t\t<input id={name} name={name} type=\"checkbox\" checked={checked} onChange={onChange} />\n\t\t<label htmlFor={name}>{label}</label>\n\t\t{hint && <Hint>{hint}</Hint>}\n\t</InputContainer>\n))\n\n//\nconst ProductListItem = memo(({ slug, onClick }) => {\n\tconst product = getItemDefinition(slug)\n\treturn (\n\t\t<ListItem onClick={() => onClick(slug)}>\n\t\t\t{product.name} <i className=\"fas fa-times fa-fw\" />\n\t\t</ListItem>\n\t)\n})\n\n//\nconst Sidebar = () => {\n\tconst [state, dispatch] = useContext(AppContext)\n\n\tconst handleFractions = useCallback(\n\t\te => {\n\t\t\tdispatch({ type: ActionType.TOGGLE_FRACTION })\n\n\t\t\tSentry.addBreadcrumb({\n\t\t\t\tcategory: 'setting-change',\n\t\t\t\tmessage: 'Fraction changed',\n\t\t\t\tlevel: Sentry.Severity.Info,\n\t\t\t})\n\t\t},\n\t\t[dispatch]\n\t)\n\tconst handleLeftMargin = useCallback(\n\t\te => {\n\t\t\tdispatch({ type: ActionType.TOGGLE_LEFT_MARGIN })\n\n\t\t\tSentry.addBreadcrumb({\n\t\t\t\tcategory: 'setting-change',\n\t\t\t\tmessage: 'Left-margin changed',\n\t\t\t\tlevel: Sentry.Severity.Info,\n\t\t\t})\n\t\t},\n\t\t[dispatch]\n\t)\n\tconst handleOnePerPage = useCallback(\n\t\te => {\n\t\t\tdispatch({ type: ActionType.TOGGLE_ONE_PER_PAGE })\n\n\t\t\tSentry.addBreadcrumb({\n\t\t\t\tcategory: 'setting-change',\n\t\t\t\tmessage: 'One-per-page changed',\n\t\t\t\tlevel: Sentry.Severity.Info,\n\t\t\t})\n\t\t},\n\t\t[dispatch]\n\t)\n\tconst handleCycleAmounts = useCallback(\n\t\te => {\n\t\t\tdispatch({ type: ActionType.TOGGLE_CYCLE_AMOUNT })\n\n\t\t\tSentry.addBreadcrumb({\n\t\t\t\tcategory: 'setting-change',\n\t\t\t\tmessage: 'Cycle-amounts changed',\n\t\t\t\tlevel: Sentry.Severity.Info,\n\t\t\t})\n\t\t},\n\t\t[dispatch]\n\t)\n\tconst handleReturnClick = useCallback(\n\t\tslug => {\n\t\t\tdispatch({ type: ActionType.RETURN_PRODUCT, slug })\n\n\t\t\tSentry.addBreadcrumb({\n\t\t\t\tcategory: 'product-returned',\n\t\t\t\tmessage: `Returned: ${slug}`,\n\t\t\t\tlevel: Sentry.Severity.Info,\n\t\t\t})\n\t\t},\n\t\t[dispatch]\n\t)\n\tconst handleReturnAllClick = useCallback(() => {\n\t\tdispatch({ type: ActionType.RETURN_ALL_PRODUCTS })\n\n\t\tSentry.addBreadcrumb({\n\t\t\tcategory: 'all-products-returned',\n\t\t\tmessage: 'Returned all products',\n\t\t\tlevel: Sentry.Severity.Info,\n\t\t})\n\t}, [dispatch])\n\n\treturn (\n\t\t<SidebarWrapper>\n\t\t\t<AppTitle>\n\t\t\t\t<Logo src={logo} alt=\"Satisfactory Notebook\" width=\"260\" height=\"81\" />\n\t\t\t</AppTitle>\n\n\t\t\t<SidebarSection>\n\t\t\t\t<SectionHeader icon=\"fa-cog\" label=\"Settings\" />\n\t\t\t\t<SettingCheckbox\n\t\t\t\t\tlabel=\"Use Fractions\"\n\t\t\t\t\tname=\"fractions\"\n\t\t\t\t\tchecked={state.checked}\n\t\t\t\t\tonChange={handleFractions}\n\t\t\t\t\thint=\"Conversions are hard\"\n\t\t\t\t/>\n\t\t\t\t<SettingCheckbox\n\t\t\t\t\tlabel=\"Show Cycle Amounts\"\n\t\t\t\t\tname=\"cycleAmount\"\n\t\t\t\t\tchecked={state.cycleAmount}\n\t\t\t\t\tonChange={handleCycleAmounts}\n\t\t\t\t\thint=\"Include per cycle inputs/outputs\"\n\t\t\t\t/>\n\t\t\t\t<SettingCheckbox\n\t\t\t\t\tlabel=\"Pad Left Margin\"\n\t\t\t\t\tname=\"leftMargin\"\n\t\t\t\t\tchecked={state.padLeftMargin}\n\t\t\t\t\tonChange={handleLeftMargin}\n\t\t\t\t\thint=\"To account for punched holes\"\n\t\t\t\t/>\n\t\t\t\t<SettingCheckbox\n\t\t\t\t\tlabel=\"One Recipe Per Page\"\n\t\t\t\t\tname=\"onePerPage\"\n\t\t\t\t\tchecked={state.onePerPage}\n\t\t\t\t\tonChange={handleOnePerPage}\n\t\t\t\t\thint=\"Waste ALL the paper\"\n\t\t\t\t/>\n\t\t\t</SidebarSection>\n\n\t\t\t{/*  */}\n\t\t\t<SidebarSection>\n\t\t\t\t<SectionHeader icon=\"fa-print\" label=\"Print Settings\" />\n\t\t\t\t<SectionContent>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Margins:</strong> None\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Scale:</strong> 100\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Background Graphics:</strong> ✅️\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</SectionContent>\n\t\t\t</SidebarSection>\n\n\t\t\t{state.removedProducts.length > 0 && (\n\t\t\t\t<SidebarSection>\n\t\t\t\t\t<SectionHeader icon=\"fa-filter\" label=\"Filtered Items\" />\n\t\t\t\t\t<SectionContent>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<Reset onClick={handleReturnAllClick}>Reset All</Reset>\n\t\t\t\t\t\t\t{state.removedProducts.map(p => (\n\t\t\t\t\t\t\t\t<ProductListItem slug={p} key={p} onClick={handleReturnClick} />\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</SectionContent>\n\t\t\t\t</SidebarSection>\n\t\t\t)}\n\t\t</SidebarWrapper>\n\t)\n}\n\nexport default memo(Sidebar)\n\nconst HeaderWrapper = styled.div`\n\tmargin: 18px 0 12px 0;\n\tfont-weight: bold;\n`\n\nconst SidebarSection = styled.div`\n\tmargin: 6px 0;\n`\n\nconst SidebarWrapper = styled.div`\n\t/* width: 300px; */\n\tmin-width: 260px;\n\tbackground: #bbb;\n\tposition: sticky;\n\ttop: 0;\n\theight: 100vh;\n\tpadding: 10px;\n\n\t@media print {\n\t\tdisplay: none;\n\t}\n\n\t/* TODO - Extract the max-width to variable */\n\t@media screen and (max-width: 600px) {\n\t\twidth: 100%;\n\t\tposition: unset;\n\t\theight: auto;\n\t}\n`\n\nconst AppTitle = styled.div`\n\t/* font-weight: bold;\n\tfont-size: 22px;\n\tmargin-bottom: 6px; */\n`\n\nconst InputContainer = styled.div`\n\tmargin: 12px 0 12px 18px;\n\tfont-size: 0.9em;\n`\n\nconst SectionContent = styled.div`\n\tfont-size: 0.8em;\n\tmargin: 12px 0 12px 18px;\n`\n\nconst Hint = styled.div`\n\tfont-size: 0.8em;\n\tfont-style: italic;\n\tmargin-left: 18px;\n\tmargin-top: 2px;\n\tcolor: #444;\n`\n\nconst ListItem = styled.li`\n\tcolor: darkred;\n\tcursor: pointer;\n`\n\nconst Logo = styled.img`\n\tmax-width: 100%;\n\theight: auto;\n`\n\nconst Reset = styled.li`\n\tcolor: darkred;\n\tcursor: pointer;\n\tfont-weight: bold;\n`\n","import React from 'react'\n// import styled from 'styled-components'\nimport { styled } from '@linaria/react'\n\nimport ProductList from 'components/ProductList'\nimport Sidebar from 'components/Sidebar'\nimport { importImageManifest } from 'loaders/imageMap'\n\nimport ContextProvider from './AppContext'\n\n// Preload images\nimportImageManifest()\n\nfunction App() {\n\treturn (\n\t\t<ContextProvider>\n\t\t\t<React.Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<FlexRows>\n\t\t\t\t\t<Sidebar />\n\t\t\t\t\t<ProductList />\n\t\t\t\t</FlexRows>\n\t\t\t</React.Suspense>\n\t\t</ContextProvider>\n\t)\n}\n\nexport default App\n\nconst FlexRows = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\n\t@media (max-width: 600px) {\n\t\tflex-direction: column;\n\t}\n`\n"]}