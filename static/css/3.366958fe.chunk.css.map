{"version":3,"sources":["webpack://src/.linaria-cache/src/components/src/components/Fraction.js","webpack://src/.linaria-cache/src/components/src/components/Ingredient.js"],"names":[".s1eoswxg",".w1bcj1md",".h85p5d3",".i1c5ztg",".n11mvc7y",".cbrmox1",".qq16r8p"],"mappings":"AAIMA,UAAAA,cAAAA,CCgDAC,UAAAA,kBAAAA,CAAAA,6BAAAA,CAAAA,YAAAA,CAAAA,kBAAAA,CAAAA,eAAAA,CAAAA,iBAAAA,CAWAC,mBAXAD,YAAAA,CAAAA,kBAWAC,CAAAA,SAAAA,cAAAA,CAAAA,eAAAA,CAOAC,SAAAA,cAAAA,CAAAA,UAAAA,CAAAA,WAAAA,CAAAA,gBAAAA,CAOAC,UAAAA,iBAAAA,CAIAC,SAAAA,gBAAAA,CAIAC,SAAAA,eAAAA,CAAAA,kBAAAA","file":"3.366958fe.chunk.css","sourcesContent":["import { memo } from 'react'\n// import styled from 'styled-components'\nimport { styled } from '@linaria/react'\n\nconst SmallPart = styled.span`\n\tfont-size: 0.8em;\n`\n\nconst Fraction = ({ fraction }) => {\n\tif (!fraction) return null\n\n\tif (fraction.indexOf('/') < 0) return fraction\n\n\tconst splits = fraction.split(' ')\n\tconst hasWhole = fraction.includes(' ')\n\tconst whole = hasWhole ? splits[0] : null\n\tconst numer = hasWhole ? splits[1].split('/')[0] : splits[0].split('/')[0]\n\tconst denom = hasWhole ? splits[1].split('/')[1] : splits[0].split('/')[1]\n\n\treturn (\n\t\t<>\n\t\t\t{whole && `${whole} `}\n\t\t\t<SmallPart>\n\t\t\t\t<sup>{numer}</sup>&frasl;<sub>{denom}</sub>&nbsp;\n\t\t\t</SmallPart>\n\t\t</>\n\t)\n}\n\nexport default memo(Fraction)\n","import React, { memo, useContext } from 'react'\n// import styled from 'styled-components'\nimport { styled } from '@linaria/react'\n\nimport { getItemDefinition, getItemIcon } from 'loaders/items'\nimport { calculateRate } from 'loaders/recipes'\n\nimport { AppContext } from '../AppContext'\nimport Fraction from './Fraction'\n\nconst imageSize = 30\n\n//\nconst Rate = memo(({ perMinFraction, perMin }) => {\n\tconst [{ fractions }] = useContext(AppContext)\n\treturn <strong>{fractions ? <Fraction fraction={perMinFraction} /> : perMin}</strong>\n})\n\n//\nconst CycleRate = memo(({ perCycle, perCycleLabel }) => {\n\tconst [{ cycleAmount }] = useContext(AppContext)\n\tif (!cycleAmount) return null\n\treturn (\n\t\t<CycleAmount>\n\t\t\t{perCycle}\n\t\t\t{perCycleLabel}\n\t\t</CycleAmount>\n\t)\n})\n\n//\nconst Ingredient = ({ slug, amount, duration }) => {\n\tconst itemDef = getItemDefinition(slug)\n\tconst rate = calculateRate(amount, duration, itemDef.form === 2)\n\n\treturn (\n\t\t<Wrapper key={slug}>\n\t\t\t<Header>\n\t\t\t\t{itemDef.icon ? <Image src={getItemIcon(slug)} alt={itemDef.name} width={imageSize} height={imageSize} /> : null}\n\t\t\t\t<CycleRate perCycleLabel={rate.perCycleLabel} perCycle={rate.perCycle} />\n\t\t\t\t<Name href={`#${slug}`}>{itemDef.name}</Name>\n\t\t\t</Header>\n\t\t\t<Quantity>\n\t\t\t\t<Rate perMin={rate.perMin} perMinFraction={rate.perMinFraction} />\n\t\t\t\t<small>{rate.perMinLabel}</small>\n\t\t\t</Quantity>\n\t\t</Wrapper>\n\t)\n}\n\nexport default memo(Ingredient)\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\talign-items: center;\n\tmargin: 2px 0px;\n\tbackground: #ededed;\n\tpadding: 4px 5px;\n\tborder-radius: 5px;\n`\n\nconst Header = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tfont-size: 12px;\n\tline-height: 1.2;\n`\n\nconst Image = styled.img`\n\tmax-width: 100%;\n\twidth: ${imageSize}px;\n\theight: ${imageSize}px;\n\tmargin-right: 3px;\n`\n\nconst Name = styled.a`\n\tpadding-right: 3px;\n`\n\nconst CycleAmount = styled.span`\n\tmargin-right: 5px;\n`\n\nconst Quantity = styled.div`\n\tline-height: 1.2;\n\twhite-space: nowrap;\n`\n"]}